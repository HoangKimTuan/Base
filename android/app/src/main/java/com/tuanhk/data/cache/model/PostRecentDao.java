package com.tuanhk.data.cache.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TRANSFER_RECENT".
*/
public class PostRecentDao extends AbstractDao<PostRecent, Long> {

    public static final String TABLENAME = "POST_RECENT";

    /**
     * Properties of entity PostRecent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property id = new Property(0, long.class, "id", true, "ID");
        public final static Property title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property body = new Property(2, String.class, "body", false, "BODY");
    }


    public PostRecentDao(DaoConfig config) {
        super(config);
    }

    public PostRecentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST_RECENT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"BODY\" TEXT);"); // 2: body
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST_RECENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PostRecent entity) {
        stmt.clearBindings();

        long id = entity.id;
        if (id != 0) {
            stmt.bindLong(1, id);
        }

        String title = entity.title;
        if (title != null) {
            stmt.bindString(2, title);
        }

        String body = entity.body;
        if (body != null) {
            stmt.bindString(3, body);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PostRecent entity) {
        stmt.clearBindings();

        long id = entity.id;
        if (id != 0) {
            stmt.bindLong(1, id);
        }

        String title = entity.title;
        if (title != null) {
            stmt.bindString(2, title);
        }

        String body = entity.body;
        if (body != null) {
            stmt.bindString(3, body);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public PostRecent readEntity(Cursor cursor, int offset) {
        PostRecent entity = new PostRecent();
        readEntity(cursor, entity, offset);
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, PostRecent entity, int offset) {
        entity.id = cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 0);
        entity.title = cursor.isNull(offset + 2) ? null : cursor.getString(offset + 1);
        entity.body = cursor.isNull(offset + 3) ? null : cursor.getString(offset + 2);
     }

    @Override
    protected final Long updateKeyAfterInsert(PostRecent entity, long rowId) {
        return entity.id;
    }

    @Override
    public Long getKey(PostRecent entity) {
        if(entity != null) {
            return entity.id;
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PostRecent entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
